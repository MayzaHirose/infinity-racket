#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1252 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; Este programa resolve um jogo infinity rotacionando seus blocos"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";; at\303\251 que todos se encaixem entre si. O m\303\251todo de res"
 #"olu\303\247\303\243o utilizado ser\303\241"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #";; por meio de busca com retrocesso (backtracking)."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; ** Conceitos **"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; Bloco"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";;  Um bloco \303\251 uma pe\303\247a do jogo Infinity. O bloco \303"
 #"\251 representado como um"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;  caractere quando lido ou escrito de um arquivo, e representado c"
 #"omo um"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#";;  n\303\272mero entre 0 e 15 quando processado dentro do programa."
0 0 24 29 1 #"\n"
0 0 17 3 7 #";; Jogo"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;  Um jogo Infinity \303\251 um tabuleiro de M linhas e N colunas ("
 #"tamanho MxN)"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";;  preenchidas por blocos. O jogo infinity \303\251 dito resolvido "
 #"quando todos seus"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";;  blocos est\303\243o conectados. O jogo \303\251 representado por"
 #" uma lista de listas."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #";; exporta as fun\303\247\303\265es que podem ser utilizadas em outr"
 #"os arquivos"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 7 #"tamanho"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 10 #"rotacionar"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 10 #"encaixa-h?"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 10 #"encaixa-v?"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 7 #"seguro?"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 8 #"resolver"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 4 #"main"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
(
 #";; lista com as representa\303\247\303\265es dos blocos como caracte"
 #"res"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"blocos-reps"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 19 3 48
(
 #"\" \342\225\271\342\225\272\342\224\227\342"
 #"\225\273\342\224\203\342\224\217\342"
 #"\224\243\342\225\270\342\224\233\342\224\201\342\224"
 #"\273\342\224\223\342\224\253\342\224\263\342\225\213\""
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; Tamanho representa o tamanho de um jogo em altura e largura"
0 0 24 29 1 #"\n"
0 0 17 3 55
#";;     altura : N\303\272mero - quantidade de linhas do jogo."
0 0 24 29 1 #"\n"
0 0 17 3 56
#";;    largura : N\303\272mero - quantidade de colunas do jogo."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 7 #"tamanho"
0 0 24 3 2 #" ("
0 0 14 3 6 #"altura"
0 0 24 3 1 #" "
0 0 14 3 7 #"largura"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"game-heigth"
0 0 24 3 1 #" "
0 0 14 3 10 #"lista-jogo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 10 #"lista-jogo"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 10 #"lista-jogo"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"game-width"
0 0 24 3 1 #" "
0 0 14 3 10 #"lista-jogo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 10 #"lista-jogo"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 10 #"lista-jogo"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"transforma-binario"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 18 #"transforma-binario"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 18 #"transforma-binario"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 18 #"transforma-binario"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"transforma-normal"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 17 #"transforma-normal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 17 #"transforma-normal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->number"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 17 #"transforma-normal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Bloco -> Bloco"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; --------------"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; Rotaciona um bloco 90 graus em sentido hor\303\241rio"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; Exemplo: (rotacionar 5)"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;          > 10"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rotacionar"
0 0 24 3 1 #" "
0 0 14 3 5 #"bloco"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"bloco-binario"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 5 #"bloco"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"zeros-esquerda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 13 #"bloco-binario"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"S"
0 0 24 3 2 #" ("
0 0 15 3 8 #"for/list"
0 0 24 3 2 #"(["
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 14 #"zeros-esquerda"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"lista-bloco-binario"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 1 #"S"
0 0 24 3 1 #" "
0 0 14 3 13 #"bloco-binario"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 19 #"lista-bloco-binario"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 86
(
 #";;(define rotacionado (append (rest lista-bloco-binario) (first list"
 #"a-bloco-binario)))"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"rotacionado"
0 0 24 3 2 #" ("
0 0 14 3 8 #"cons-fim"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 19 #"lista-bloco-binario"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 19 #"lista-bloco-binario"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 37 #";;(define rotacionado (list 1 0 1 0))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 11 #"rotacionado"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 11 #"rotacionado"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 33 #";;(display (flatten rotacionado))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"bin->dec"
0 0 24 3 1 #" "
0 0 14 3 11 #"rotacionado"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"cons-fim"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"cons-fim"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 17 3 124
(
 #";;acc \303\251 o valor acumulado referente ao valor binario em decim"
 #"al, ja o acc2 \303\251 o que guarda"
 #" o proximo valor da seq bin\303\241ria."
) 0 0 24 29 1 #"\n"
0 0 17 3 102
(
 #";; exemplo: (0110) acc = 0, acc2 = 8 (pois da esq p dir o primeiro d"
 #"igito vale 8); acc = 0 acc2 = 4 .."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"bin->dec"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 4 #"acc2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 4 #"acc2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 4 #"acc2"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 4 #"acc2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 7 #"))])]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;(define (bin->dec n)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 15 #";;(if (zero? n)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 5 #";;  n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 54 #";;(+ (modulo n 10) (* 2 (bin->dec (quotient n 10))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; Bloco Bloco -> L\303\263gico"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; ---------------------"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; Verifica se o bloco-e se encaixa horizontalmente \303\240 esquerd"
 #"a do bloco-d"
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #";; Exemplo: (encaixa-h? 7 9)"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;          > #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"encaixa-h?"
0 0 24 3 1 #" "
0 0 14 3 7 #"bloco-e"
0 0 24 3 1 #" "
0 0 14 3 7 #"bloco-d"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; Bloco Bloco -> L\303\263gico"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; ---------------------"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; Verifica se o bloco-t se encaixa verticalmente acima do bloco-b"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; Exemplo: (encaixa-v? 14 11)"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;          > #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"encaixa-v?"
0 0 24 3 1 #" "
0 0 14 3 7 #"bloco-t"
0 0 24 3 1 #" "
0 0 14 3 7 #"bloco-b"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; Bloco List Tamanho -> L\303\263gico"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; -----------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; Verifica se um bloco \303\251 seguro de ser adicionado a uma solu"
 #"\303\247\303\243o. Ser "
) 0 0 24 29 1 #"\n"
0 0 17 3 68
(
 #";; seguro significa que, ao ser adicionado \303\240 solu\303\247\303"
 #"\243o, o bloco se "
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; encaixa a todos os blo"
 #"cos adjacentes \303\240 posi\303\247\303\243o em que ele seria "
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; inserido. Uma solu\303\247\303\243o \303\251 uma lista de blocos "
 #"que representa a solu\303\247\303\243o "
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; do jogo at\303\251 o presente momento. Para facilitar a implement"
 #"a\303\247\303\243o, "
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; considere que a solu\303\247"
 #"\303\243o ser\303\241 constru\303\255da em ordem invertida. Assim, a"
 #" "
) 0 0 24 29 1 #"\n"
0 0 17 3 66
(
 #";; solu\303\247\303\243o '(9 7 12 14 6), referente ao um jogo de tam"
 #"anho 4x3, "
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #";; representa a seguinte situa\303\247\303\243o:"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 24 29 1 #"\n"
0 0 17 3 33
#";; [6][14][12]    [\342\224\217][\342\224\263][\342\224\223]"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; [7][ 9][  ] => [\342\224\243][\342\224\233][ ]"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; [ ][  ][  ]    [ ][ ][ ]"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; [ ][  ][  ]    [ ][ ][ ]"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; A chamada (seguro? 5 '(9 7 12 14 6) (tamanho 4 3)) deve verificar"
 #" se "
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; o bloco 5 [\342\224\203] \303\251 seg"
 #"uro de ser adicionado \303\240 "
 #"solu\303\247\303\243o, isto \303\251, inserido "
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; na posi\303\247\303\243o lin=2, co"
 #"l=3 da situa\303\247\303\243o descrita acima. Observe que para "
) 0 0 24 29 1 #"\n"
0 0 17 3 68
(
 #";; este exemplo o bloco 5 \303\251 seguro, pois ele se encaixa a tod"
 #"os os "
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; blocos adjacentes: ao bloco 9 \303\240 esquerda, ao bloco 12 acim"
 #"a e \303\240 "
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; borda direita (branco) do tabuleiro. Veja que n\303\243o houve ne"
 #"cessidade "
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; de se verificar o encaixe com o bloco abaixo, j\303\241 que o mes"
 #"mo ainda "
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #";; n\303\243o existe na solu\303\247\303\243o."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"seguro?"
0 0 24 3 1 #" "
0 0 14 3 5 #"bloco"
0 0 24 3 1 #" "
0 0 14 3 7 #"solucao"
0 0 24 3 1 #" "
0 0 14 3 3 #"tam"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"solucao"
0 0 24 3 1 #")"
0 0 14 3 5 #"false"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    ]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; String -> Jogo"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; Faz a leitura e processa um jogo armazenado em arquivo."
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; Exemplo: (ler-jogo \"testes/5.txt\")"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;          > '((0 6 6 1) (12 15 15 6) (1 10 10 0) (0 2 1 0))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ler-jogo"
0 0 24 3 1 #" "
0 0 14 3 7 #"arquivo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 22 #"transforma-para-numero"
0 0 24 3 1 #"("
0 0 14 3 26 #"transforma-para-lista-char"
0 0 24 3 1 #"("
0 0 14 3 11 #"port->lines"
0 0 24 3 1 #"("
0 0 14 3 15 #"open-input-file"
0 0 24 3 1 #" "
0 0 14 3 7 #"arquivo"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 26 #"transforma-para-lista-char"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 26 #"transforma-para-lista-char"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"transforma-para-numero"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 22 #"transforma-para-numero"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 22 #"transforma-para-numero"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 18 #"substitui-pelo-num"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 11 #"blocos-reps"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 22 #"transforma-para-numero"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"substitui-pelo-num"
0 0 24 3 1 #" "
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 14 3 11 #"blocos-reps"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 11 #"blocos-reps"
0 0 24 3 2 #") "
0 0 14 3 4 #"char"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 18 #"substitui-pelo-num"
0 0 24 3 1 #" "
0 0 14 3 4 #"char"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 11 #"blocos-reps"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; Dica: procure pelas fun\303\247\303\265es pr\303\251-definidas op"
 #"en-input-file e port->lines"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Jogo -> void"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; Escreve o jogo na tela codificado em caracteres."
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; Exemplo: (escrever-jogo '((6 10 14 12) (7 14 13 5) (5 7 11 13) (3"
 #" 11 10 9)))"
) 0 0 24 29 1 #"\n"
0 0 17 3 26
#";;          > \342\224\217\342\224\201\342\224\263\342\224\223"
0 0 24 29 1 #"\n"
0 0 17 3 26
#";;            \342\224\243\342\224\263\342\224\253\342\224\203"
0 0 24 29 1 #"\n"
0 0 17 3 26
#";;            \342\224\203\342\224\243\342\224\273\342\224\253"
0 0 24 29 1 #"\n"
0 0 17 3 26
#";;            \342\224\227\342\224\273\342\224\201\342\224\233"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"escrever-jogo"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"hellow\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; Dica: procure pelas fun\303\247\303\265es pr\303\251-definidas li"
 #"st->string e string-join"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 25 #"cria-lista-possibilidades"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 25 #"cria-lista-possibilidades"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 25 #"cria-lista-possibilidades"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 25 #"cria-possibilidades-bloco"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 25 #"cria-lista-possibilidades"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 25 #"cria-possibilidades-bloco"
0 0 24 3 1 #" "
0 0 14 3 5 #"bloco"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 5 #"bloco"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rotacionar"
0 0 24 3 1 #" "
0 0 14 3 5 #"bloco"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rotacionar"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"p3"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rotacionar"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"p4"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rotacionar"
0 0 24 3 1 #" "
0 0 14 3 2 #"p3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 1 #" "
0 0 14 3 2 #"p3"
0 0 24 3 1 #" "
0 0 14 3 2 #"p4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 44 #";;(cons 1 (cons 2 (cons 3 (cons 4 empty)))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; Jogo -> Jogo || #f"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; Resolve o jogo Infinity e o retorna resolvido. Caso n\303\243o se"
 #"ja poss\303\255vel"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; resolv\303\252-lo, retorna o valor falso. Por exemplo, se passado"
 #" o seguinte jogo:"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 44
(
 #";; '(( 0  6  6 1)     "
 #"    [ ][\342\224\217][\342\224\217][\342\225\271]"
) 0 0 24 29 1 #"\n"
0 0 17 3 46
(
 #";;   (12 15 15 6)    =>"
 #"   [\342\224\223][\342\225\213][\342\225\213][\342\224\217]"
) 0 0 24 29 1 #"\n"
0 0 17 3 44
(
 #";;   ( 1 10 10 0)     "
 #"    [\342\225\271][\342\224\201][\342\224\201][ ]"
) 0 0 24 29 1 #"\n"
0 0 17 3 42
#";;   ( 0  2  1 0))        [ ][\342\225\272][\342\225\271][ ]"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; a fun\303\247\303\243o deve retornar:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 44
(
 #";; '((0  6 12 4)      "
 #"    [ ][\342\224\217][\342\224\223][\342\225\273]"
) 0 0 24 29 1 #"\n"
0 0 17 3 46
(
 #";;   (6 15 15 9)     =>"
 #"   [\342\224\217][\342\225\213][\342\225\213][\342\224\233]"
) 0 0 24 29 1 #"\n"
0 0 17 3 44
(
 #";;   (1  5  5 0)      "
 #"    [\342\225\271][\342\224\203][\342\224\203][ ]"
) 0 0 24 29 1 #"\n"
0 0 17 3 42
#";;   (0  1  1 0))         [ ][\342\225\271][\342\225\271][ ]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"resolver"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"tam"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tamanho"
0 0 24 3 2 #" ("
0 0 14 3 11 #"game-heigth"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 3 #") ("
0 0 14 3 10 #"game-width"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"possibilidades"
0 0 24 3 2 #" ("
0 0 14 3 25 #"cria-lista-possibilidades"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 14 #"possibilidades"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 14 #"possibilidades"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 50 #";;(define jogo-binario (transforma-binario jogo)) "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 25 #";;(display jogo-binario))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 27 #";;(display possibilidades))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 55 #";;(define jogo-normal (transforma-normal jogo-binario))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 24 #";;(display jogo-normal))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; List String -> void"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; Esta \303\251 a fun\303\247\303\243o pri"
 #"ncipal. Esta fun\303\247\303\243o \303\251 chamada a partir do arqui"
 #"vo"
) 0 0 24 29 1 #"\n"
0 0 17 3 20 #";; infinity-main.rkt"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 50
#";; args \303\251 a lista de par\303\242metros para o programa."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";; O primeiro e \303\272nico par\303\242metro deve ser o nome (camin"
 #"ho) do arquivo que cont\303\251m "
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";; o jogo a ser resolvido. O jogo \303\251 representado na forma de "
 #"caracteres, o qual"
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";; dever\303\241 ser primeiramente "
 #"convertido para a representa\303\247\303\243o num\303\251rica antes "
 #"de"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
(
 #";; ser resolvido. Veja exemplos de arquivos no diret\303\263rio de t"
 #"estes."
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";; A sa\303\255da desta fun\303\247\303\243"
 #"o \303\251 a escrita na tela do jogo resolvido, representado na"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";; forma de caracteres. Cas"
 #"o o jogo n\303\243o possua solu\303\247\303\243o, nada deve ser escr"
 #"ito na"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";; tela."
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;(define (iter solucao possibilidades)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 7 #";;(cond"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 35 #";;[(empty? possibilidades) solucao]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 38 #";;[(empty? (first possibilidades)) #f]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 57 #";;[(seguro? (first (first possibilidadades)) solucao tam)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 76
(
 #";;(or (iter (adiciona candidato solucao) (remove candidatos possibil"
 #"idades))"
) 0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 54 #";;  (iter solucao (exclui candidato possibilidades)))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 59
#";;[else (iter solucao (exclui candidato possibilidades))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"main"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 16 #";;(display args)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ler-jogo"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"solucao"
0 0 24 3 2 #" ("
0 0 14 3 8 #"resolver"
0 0 24 3 1 #" "
0 0 14 3 4 #"jogo"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"escrever-jogo"
0 0 24 3 1 #" "
0 0 14 3 7 #"solucao"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
